{
	"compiler": {
		"version": "0.8.27+commit.40a35a09"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_stakingToken",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "_rewardToken",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakingPeriod",
						"type": "uint256"
					}
				],
				"name": "Stake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"name": "Unstake",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "PREMIUM_THRESHOLD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "availableReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "fundRewardPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "getStakerInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountStaked",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stakingPeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "hasPremium",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "hasPremiumAccess",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_stakingPeriod",
						"type": "uint256"
					}
				],
				"name": "stakeTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "stakers",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountStaked",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stakingPeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "hasPremiumAccess",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unstakeAndClaim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This contract implements a staking-based airdrop system. Users can stake ERC20 tokens,  earn rewards based on the staking duration, and get premium access if they stake above a threshold.",
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"events": {
				"Stake(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of tokens staked",
						"stakingPeriod": "The duration for which tokens are staked",
						"user": "The address of the user staking tokens"
					}
				},
				"Unstake(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of tokens unstaked",
						"reward": "The reward tokens claimed by the user",
						"user": "The address of the user unstaking tokens"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Constructor to initialize staking and reward tokens",
					"params": {
						"_rewardToken": "The ERC20 token used for rewards",
						"_stakingToken": "The ERC20 token used for staking"
					}
				},
				"fundRewardPool(uint256)": {
					"params": {
						"_amount": "The amount of reward tokens to add to the pool"
					}
				},
				"getStakerInfo(address)": {
					"params": {
						"_user": "The address of the user"
					},
					"returns": {
						"amountStaked": "The amount of tokens staked by the user",
						"hasPremium": "True if the user has premium access, false otherwise",
						"stakingPeriod": "The duration for which the user staked tokens",
						"startTime": "The time when the staking began"
					}
				},
				"hasPremiumAccess(address)": {
					"params": {
						"_user": "The address of the user"
					},
					"returns": {
						"_0": "True if the user has premium access, false otherwise"
					}
				},
				"stakeTokens(uint256,uint256)": {
					"params": {
						"_amount": "The amount of tokens to stake",
						"_stakingPeriod": "The duration (in seconds) for which tokens are staked"
					}
				}
			},
			"title": "StakingAirdrop",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Stake(address,uint256,uint256)": {
					"notice": "Event emitted when a user stakes tokens"
				},
				"Unstake(address,uint256,uint256)": {
					"notice": "Event emitted when a user unstakes tokens and claims rewards"
				}
			},
			"kind": "user",
			"methods": {
				"PREMIUM_THRESHOLD()": {
					"notice": "Minimum amount of tokens required for premium access"
				},
				"availableReward()": {
					"notice": "Available rewards remaining in the pool"
				},
				"fundRewardPool(uint256)": {
					"notice": "Fund the reward pool with reward tokens"
				},
				"getStakerInfo(address)": {
					"notice": "Get staker information for a specific user"
				},
				"hasPremiumAccess(address)": {
					"notice": "Check if a user has premium access based on their staked amount"
				},
				"rewardToken()": {
					"notice": "ERC20 token used for rewards"
				},
				"stakeTokens(uint256,uint256)": {
					"notice": "Stake tokens into the staking pool"
				},
				"stakers(address)": {
					"notice": "Mapping from user address to staker information"
				},
				"stakingToken()": {
					"notice": "ERC20 token used for staking"
				},
				"totalReward()": {
					"notice": "Total amount of rewards available in the pool"
				},
				"unstakeAndClaim()": {
					"notice": "Unstake tokens and claim rewards after the staking period ends"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/StakingAirdrop.sol": "StakingAirdrop"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"contracts/StakingAirdrop.sol": {
			"keccak256": "0xee986a4b725286a541645afe13e400f26d8199f0e441e4be0374a8d2ef1b1511",
			"license": "MIT",
			"urls": [
				"bzz-raw://6821d366c3083cea335493c5588d021b58b95631cc770894f95cce981aea6bac",
				"dweb:/ipfs/QmYiVdymcJX4aGt1nobPSnSoVSYw8R8W6P86n2SetQHxdw"
			]
		}
	},
	"version": 1
}